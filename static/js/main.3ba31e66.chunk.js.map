{"version":3,"sources":["features/GameOptions/parts/StackSizeInput.tsx","features/GameOptions/consts.ts","consts.ts","features/GameOptions/GameOptions.tsx","nim/node.ts","nim/Nim.ts","features/Stacks/parts/Stack.tsx","features/Stacks/Stacks.tsx","features/Introduction/Introduction.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["StackSizeInput","stackIdx","stackSize","setStackSize","useEffect","className","clsx","type","id","String","value","min","onChange","target","Number","htmlFor","USER_MOVE","COMPUTER_MOVE","GameOptions","setStackAmount","isVisible","startGame","stackAmount","setMove","useState","firstMove","setFirstMove","Array","keys","map","val","checked","onClick","Node","piles","parent","heuristicValue","childList","getPiles","JSON","parse","stringify","getChildList","getHeuristicValue","setHeuristicValue","isEmpty","every","equals","givenNode","isEqual","this","push","Nim","state","getIsEmpty","playerMove","stack","amount","console","log","move","computerMove","minimax","perfectMove","find","node","generateChildNodes","nodes","i","length","temp","child","num","depth","maximizingPlayer","heuristicEvaluation","bestValue","MIN_SAFE_INTEGER","forEach","MAX_SAFE_INTEGER","nimSum","reduce","acc","stacks","pile","prompt","pileAmount","Stack","getPlayerMove","idx","coloredRed","hoveringElement","setHoveringElement","onMouseEnter","currentTarget","onMouseLeave","Stacks","stacksValues","divRef","ref","Introduction","usePrevious","useRef","current","App","setIsVisible","isGameStarted","setIsGameStarted","setStateStackSize","setStateStackAmount","setColoredRed","winner","setWinner","isInstructionShown","setInstructionShow","prevStackAmount","prevMove","nodeRef","nimRef","Object","fromEntries","entries","key","setTimeout","getComputerMove","height","getBoundingClientRect","style","prevStackSize","filter","values","size","prevState","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ba31e66.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {FC, useEffect} from 'react';\nimport clsx from 'clsx';\nimport {StackSize} from '../GameOptions';\nimport {DEFAULT_NUMBER_OF_ELEMENTS_IN_STACK, MIN_STACK_SIZE} from '../consts';\nimport './StackSizeInput.style.scss';\n\nexport interface StackSizeInputProps {\n    stackIdx: number\n    stackSize: StackSize\n    setStackSize: (size: StackSize) => void\n}\n\nexport const StackSizeInput: FC<StackSizeInputProps> = ({stackIdx, stackSize = {}, setStackSize}) => {\n    useEffect(() => {\n        setStackSize({[stackIdx]: DEFAULT_NUMBER_OF_ELEMENTS_IN_STACK})\n    }, [])\n    return (\n        <div className={clsx('StackSizeInputWrapper')}>\n            <input type='number' id={String(stackIdx)} value={stackSize?.[stackIdx] || DEFAULT_NUMBER_OF_ELEMENTS_IN_STACK} min={MIN_STACK_SIZE}\n                   onChange={({target: {value}}) => setStackSize({[stackIdx]: Number(value)})}/>\n            <label htmlFor={String(stackIdx)}>{ `Number Of elements in stack ${stackIdx + 1 }` }</label>\n        </div>\n    )\n}\n\nexport default StackSizeInput;\n","export const DEFAULT_NUMBER_OF_ELEMENTS_IN_STACK = 3;\nexport const MIN_STACK_SIZE = 1;\n","export const USER_MOVE = 'user_move';\nexport const COMPUTER_MOVE = 'computer_move';","import {FC, useState} from 'react';\nimport clsx from 'clsx';\nimport StackSizeInput from './parts/StackSizeInput';\nimport './GameOptions.style.scss';\nimport {COMPUTER_MOVE} from \"../../consts\";\n\nexport interface GameOptionsProps {\n    setStackAmount: (stackAmount: number) => void\n    setStackSize: (stackSize: StackSize) => void\n    isVisible: boolean\n    startGame: () => void\n    stackAmount: number\n    stackSize: StackSize\n    move?: string\n    setMove: (move: string) => void\n}\n\nexport interface StackSize {\n    [stack: string]: number\n}\n\nexport const GameOptions: FC<GameOptionsProps> = ({\n                                                      setStackAmount,\n                                                      setStackSize,\n                                                      isVisible,\n                                                      startGame,\n                                                      stackSize,\n                                                      stackAmount,\n                                                      setMove\n                                                  }) => {\n    const [firstMove, setFirstMove] = useState<boolean>(true)\n\n    const onStartGameClick = () => {\n        startGame();\n        if (!firstMove) {\n            setMove(COMPUTER_MOVE);\n        }\n    }\n\n    return (\n        <div className={clsx('SettingsPopup', isVisible && 'SettingsPopup_isVisible')}>\n            <div className='SettingsPopup-StackAmountWrapper'>\n                <input type='number' id='stackAmount' className='SettingsPopup-StackAmount' value={stackAmount}\n                       onChange={({target: {value}}) => setStackAmount(Number(value))}/>\n                <label htmlFor='stackAmount'>Number of Stacks</label>\n            </div>\n            <div className='SettingsPopup-StackSizeWrapper'>\n                {[...Array(stackAmount).keys()].map((val) => <StackSizeInput key={val} stackIdx={val}\n                                                                             stackSize={stackSize}\n                                                                             setStackSize={setStackSize}/>)}\n            </div>\n            <div className='SettingsPopup-FirstMoveWrapper'>\n                <input type='checkbox' id='firstmove' className='SettingsPopup-FirstMove' checked={firstMove}\n                       onChange={({target: {checked}}) => setFirstMove(checked)}/>\n                <label htmlFor='firstmove'>Player makes first move</label>\n            </div>\n            <div className='SettingsPopup-StartWrapper'>\n                <button onClick={onStartGameClick}>\n                    Save & Start Game\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default GameOptions","import {isEqual} from 'lodash-es';\n\nexport class Node {\n    // TODO - fix accesses\n    public piles: number[] = [];\n    public heuristicValue: number = 0;\n    public childList: Node[] = [];\n\n    constructor(piles: number[], parent: Node | null = null) {\n        if (parent === null) {\n            this.piles = piles;\n            this.childList = [];\n        } else {\n            parent.childList.push(this);\n            this.piles = piles;\n            this.childList = [];\n        }\n    }\n\n    // creating a \"new\" array so in Nim class we aren't editing this nodes array\n    getPiles = (): number[] => JSON.parse(JSON.stringify(this.piles));\n\n    getChildList = (): Node[] => this.childList;\n\n    getHeuristicValue = (): number => this.heuristicValue;\n\n    setHeuristicValue = (val: number): void => {\n        this.heuristicValue = val;\n    }\n\n    isEmpty = (): boolean => this.piles.every((val) => val === 0);\n\n    equals = (givenNode: Node | null): boolean => {\n        if (givenNode === this) {\n            return true;\n        }\n        if (givenNode === null) {\n            return false;\n        }\n\n        return isEqual(this.piles, givenNode.piles)\n    }\n}\n\nexport default Node;","import Node from './node'\n\nexport class Nim {\n    public state: Node;\n\n    constructor(state: Node) {\n        this.state = state;\n    }\n\n    getIsEmpty = (): boolean => this.state.isEmpty();\n\n    playerMove = (stack: number, amount: number): number[] => {\n        console.log('User move')\n        console.log('Current state ', this.state.piles)\n        this.state = this.move(stack, amount);\n        console.log('After move ', this.state.piles)\n\n        return this.state.getPiles();\n    }\n\n    computerMove = (): number[] => {\n        console.log('Computer move')\n        console.log('Current state ', this.state.piles)\n        const minimax = this.minimax(this.state, 2, true);\n        const perfectMove = this.state.getChildList().find((node) => node.getHeuristicValue() === minimax);\n        this.state = perfectMove || this.state.getChildList()[0];\n        console.log('After Move ', this.state.piles)\n\n        return this.state.getPiles();\n    }\n\n    generateChildNodes = (givenNode: Node): Node[] => {\n        if (givenNode.isEmpty()) {\n            return [];\n        }\n\n        const nodes = [];\n        const piles = givenNode.getPiles();\n\n        // TODO - make this code better (more JSish)\n        for (let i = 0; i < piles.length; i++) {\n            let temp = givenNode.getPiles();\n            while (temp[i] > 0) {\n                temp[i] = temp[i] - 1;\n                // for some reason feeding the direct temp stack makes the node id's merge, so we iterate with map to solve it\n                const child = new Node(temp.map(num => num), givenNode);\n                nodes.push(child);\n            }\n        }\n\n        return nodes;\n    }\n\n    minimax = (givenNode: Node, depth: number, maximizingPlayer: boolean): number => {\n        if (depth === 0 || givenNode.isEmpty()) {\n            return (maximizingPlayer ? 1 : -1) * this.heuristicEvaluation(givenNode)\n        }\n\n        if (maximizingPlayer) {\n            let bestValue = Number.MIN_SAFE_INTEGER\n            this.generateChildNodes(givenNode).forEach((child) => {\n                const value = this.minimax(child, depth - 1, false)\n\n                if (value > bestValue) {\n                    bestValue = value\n                }\n\n                child.setHeuristicValue(value)\n                givenNode.setHeuristicValue(bestValue)\n            })\n\n            return bestValue;\n        } else {\n            let bestValue = Number.MAX_SAFE_INTEGER\n            this.generateChildNodes(givenNode).forEach((child) => {\n                const value = this.minimax(child, depth - 1, true)\n\n                if (value < bestValue) {\n                    bestValue = value\n                }\n\n                child.setHeuristicValue(value)\n                givenNode.setHeuristicValue(bestValue)\n            })\n\n            return bestValue;\n        }\n    }\n\n    heuristicEvaluation = (givenNode: Node): number => this.nimSum(givenNode) !== 0 ? 1 : -1;\n\n    nimSum = (givenNode: Node): number => givenNode.getPiles().reduce((acc,val) => (acc ^ val), 0)\n\n    move = (stack: number | null = null, amount: number | null = null): Node => {\n        if (stack !== null && amount !== null) {\n            const stacks = this.state.getPiles();\n            stacks[stack] = stacks[stack] - amount;\n            return new Node(stacks, this.state);\n        }\n\n        // legacy prompt/console interaction code\n        while (true) {\n            const pile = Number(prompt('choose pile'))\n            const piles = this.state.getPiles();\n            if (pile < 0 || piles?.length < pile) {\n                console.log('wrong pile number')\n                continue;\n            }\n            const pileAmount = piles[pile];\n\n            const amount = Number(prompt('choose amount'))\n            if (amount < 0 || pileAmount === 0 || pileAmount < amount) {\n                console.log('wrong amount')\n                continue;\n            }\n\n            piles[pile] = pileAmount - amount;\n\n            return new Node(piles, this.state);\n        }\n    }\n}\n\nexport default Nim;\n","import {FC, useState} from 'react'\nimport clsx from 'clsx'\nimport {USER_MOVE} from '../../../consts';\nimport './Stack.style.scss'\n\nexport interface StackProps {\n    stackSize: number\n    move?: string\n    getPlayerMove: (stack: number, amount: number) => void\n    idx: number\n    coloredRed: number\n}\n\nexport const Stack: FC<StackProps> = ({stackSize, move, getPlayerMove, idx, coloredRed}) => {\n    const [hoveringElement, setHoveringElement] = useState<number>(-1)\n\n    return (\n        <div className={clsx('StackWrapper')}>\n                {[...Array(stackSize).keys()].map((val) =>\n                    <div id={String(val)} className={clsx('StackWrapper-Element', val <= hoveringElement && 'StackWrapper-Element_isActive', val < coloredRed && 'StackWrapper-Element_isRed')}\n                        onMouseEnter={({currentTarget: {id}}) => setHoveringElement(Number(id))}\n                        onMouseLeave={() => setHoveringElement(-1)}\n                         onClick={({currentTarget: {id}}) => {\n                             if (move === USER_MOVE) {\n                                 getPlayerMove(idx, Number(id))\n                             }\n                         }}\n                    >&nbsp;\n                    </div>)}\n        </div>\n    )\n}\nexport default Stack;","import {FC} from 'react';\nimport clsx from 'clsx';\nimport Stack from \"./parts/Stack\";\nimport './Stacks.style.scss'\nimport {StackSize} from \"../GameOptions/GameOptions\";\n\nexport interface StacksProps {\n    stacksValues: number[]\n    move: string\n    getPlayerMove: (stack: number, amount: number) => void\n    divRef: any\n    coloredRed: StackSize\n}\n\nexport const Stacks: FC<StacksProps> = ({stacksValues, move, getPlayerMove, divRef, coloredRed}) =>\n    (\n        <div className={clsx('StacksWrapper')} ref={divRef}>\n            {stacksValues.map((val, idx) => <Stack idx={idx} coloredRed={coloredRed?.[idx] || -1} stackSize={val}\n                                                   move={move} getPlayerMove={getPlayerMove}/>)}\n        </div>\n    )\n\n\nexport default Stacks;","import {FC} from 'react';\nimport './Introduction.style.scss'\n\nexport const Introduction: FC = () => {\n    return (\n        <div className='Introduction'>\n            <span className='Introduction-Title'>Welcome to Nim Game!</span>\n            <span className='Introduction-Instructions'>To start a new game click the settings button above and select game options</span>\n            <span className='Introduction-Instructions'>You will be playing as Player and will have the first move (by default)</span>\n            <span className='Introduction-Instructions'>To remove elements from a stack hover over the particular stack and you will see elements highlighted that you will remove and click</span>\n            <span className='Introduction-Instructions'>The computers moves will be highlighted red for a split second</span>\n        </div>\n    )\n}\n\nexport default Introduction;","/* eslint-disable react-hooks/exhaustive-deps */\nimport {FC, useState, useEffect, useRef, MutableRefObject} from 'react';\nimport clsx from 'clsx';\nimport './App.style.scss';\nimport GameOptions from \"./features/GameOptions/GameOptions\";\nimport Nim from './nim/Nim';\nimport Node from './nim/node'\nimport {StackSize} from \"./features/GameOptions/GameOptions\";\nimport Stacks from \"./features/Stacks/Stacks\";\nimport {USER_MOVE, COMPUTER_MOVE} from './consts';\nimport Introduction from \"./features/Introduction/Introduction\";\n\nexport const usePrevious = (value: any) => {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport const App: FC = () => {\n    const [isVisible, setIsVisible] = useState<boolean>(false)\n    const [isGameStarted, setIsGameStarted] = useState<boolean>(false)\n\n    const [stackSize, setStateStackSize] = useState<StackSize>({})\n    const [stackAmount, setStateStackAmount] = useState<number>(3)\n    const [move, setMove] = useState<string>(USER_MOVE)\n    const [coloredRed, setColoredRed] = useState<StackSize>({})\n    const [winner, setWinner] = useState<string>('')\n    const [isInstructionShown, setInstructionShow] = useState<boolean>(true)\n\n    const setStackSize = (size: StackSize) => {\n        setStateStackSize(prevState => ({...prevState, ...size}))\n    }\n\n    const prevStackAmount = usePrevious(stackAmount) || 3;\n    const prevMove = usePrevious(move);\n\n    // defining them here to have access in multiple functions\n    const nodeRef = useRef<Node>({} as Node);\n    const nimRef = useRef<Nim>({} as Nim);\n\n    const divRef = useRef() as MutableRefObject<HTMLDivElement>\n\n    const startGame = () => {\n        setIsVisible(false)\n        setIsGameStarted(true)\n\n        nodeRef.current = new Node(Object.values(stackSize));\n        nimRef.current = new Nim(nodeRef.current);\n\n    }\n\n    const getPlayerMove = (stack: number, amount: number): void => {\n        // amount + 1 due to id's starting from 0\n        const result = nimRef.current.playerMove(stack, amount + 1);\n        const stacks = result.reduce((acc, val, idx) => ({...acc, [idx]: val}), {})\n\n        setStateStackSize(stacks)\n        setMove(COMPUTER_MOVE)\n    }\n\n    const getComputerMove = (): void => {\n        const result = nimRef.current.computerMove();\n        const stacks: StackSize = result.reduce((acc, val, idx) => ({...acc, [idx]: val}), {})\n\n        const computerMove = Object.fromEntries(Object.entries(stackSize).map(([key, val]) => [key, val - stacks[key]]))\n        setColoredRed(computerMove);\n\n        setTimeout(() => {\n            setColoredRed({})\n            setStateStackSize(stacks)\n            setMove(USER_MOVE)\n        }, 250)\n    }\n\n    const onPlayAgainClick = (): void => {\n        setWinner('')\n        setStateStackSize({})\n        setStateStackAmount(3)\n        setIsVisible(true)\n    }\n\n    useEffect(() => {\n        if (move === COMPUTER_MOVE) {\n            getComputerMove()\n        }\n\n        if (Object.keys(nimRef?.current)?.length && nimRef.current.getIsEmpty()) {\n            setIsGameStarted(false)\n            setWinner(prevMove === USER_MOVE ? 'You win!' : 'Computer win!')\n        }\n    }, [move])\n\n    useEffect(() => {\n        if (isGameStarted) {\n            const height = divRef.current?.getBoundingClientRect()?.height;\n            if (height) {\n                divRef.current.style.height = `${height}px`\n            }\n        }\n    }, [isGameStarted])\n\n    useEffect(() => {\n        if (stackAmount < prevStackAmount) {\n            setStateStackSize(prevStackSize => Object.fromEntries(Object.entries(prevStackSize).filter(([key]) => Number(key) < stackAmount)))\n        }\n    }, [stackAmount])\n\n    useEffect(() => {\n        if(isInstructionShown && isVisible) {\n            setInstructionShow(false)\n        }\n    },[isVisible])\n\n    return (\n        <div className={clsx('App', isVisible && 'App-SettingsPopupOpen')}>\n            <button onClick={() => {\n                setIsVisible(!isVisible);\n                setIsGameStarted(false)\n            }}>Settings\n            </button>\n            { isInstructionShown && <Introduction /> }\n            { isVisible && (<GameOptions isVisible={isVisible} startGame={startGame} setStackAmount={setStateStackAmount}\n                         setStackSize={setStackSize} stackAmount={stackAmount} stackSize={stackSize} setMove={setMove}/>) }\n            {isGameStarted &&\n            <Stacks divRef={divRef} stacksValues={Object.values(stackSize)} getPlayerMove={getPlayerMove} move={move}\n                    coloredRed={coloredRed}/>}\n            {winner && (\n                <div className='App-WinnerWrapper'>\n                    <span className='App-WhoWon'>{winner}</span>\n                    <button className='App-PlayAgainButton' onClick={onPlayAgainClick}>Play Again?</button>\n            </div>)}\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\nexport const store = configureStore({\n  reducer: {\n\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}